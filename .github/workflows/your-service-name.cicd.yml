name: CI/CD Pipeline for Service

on:
  pull_request:
    branches: [main] # Specify branches as needed
  push:
    branches: [main] # Specify branches as needed

jobs:
  build:
    runs-on: ubuntu-latest # You can keep using Ubuntu for the CI pipeline (GitHub hosted runner)
    defaults:
      run:
        working-directory: "." # Adjust this to the root directory of your Node.js project

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Specify the Node.js version you require

      - name: Install dependencies
        run: yarn install

      - name: Run build
        run: yarn build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build

      # Step 1: Run setup-environment.sh script
      - name: Setup environment on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }} # Replace with Amazon Linux server IP
          username: ${{ secrets.SERVER_USERNAME }} # Amazon Linux username (e.g., ec2-user)
          key: ./scripts/ExpressAPI.pem # Using the SSH private key from your scripts folder
          port: 22
          script: |
            # Run the setup-environment.sh script on the server
            bash /home/ec2-user/scripts/setup-environment.sh

      # Step 2: Prepare Deployment Directories
      - name: Prepare Deployment Directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ./scripts/ExpressAPI.pem
          port: 22
          script: |
            sudo mkdir -p /home/ec2-user/apps/build
            sudo mkdir -p /home/ec2-user/apps/build/configs

      # Step 3: Copy files to Server
      - name: Copy files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ./scripts/ExpressAPI.pem
          port: 22
          source: "./build/*"
          target: "/home/ec2-user/apps/build"  # Update the directory for Amazon Linux

      # Step 4: Create .env File
      - name: Create .env File
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ./scripts/ExpressAPI.pem
          port: 22
          script: |
            echo "NODE_ENV=production" > /home/ec2-user/apps/build/configs/.env.production
            echo "PORT=${{ secrets.PORT }}" >> /home/ec2-user/apps/build/configs/.env.production
            echo "MONGODB_URL=${{ secrets.MONGODB_URL}}" >> /home/ec2-user/apps/build/configs/.env.production

      # Step 5: Install Dependencies and Restart Application
      - name: Install Dependencies and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ./scripts/ExpressAPI.pem
          port: 22
          script: |
            # For Amazon Linux, use ec2-user and paths for NVM and yarn
            source /home/ec2-user/.nvm/nvm.sh
            source /home/ec2-user/.bash_profile

            cd /home/ec2-user/apps/build
            yarn install --production

            # Use PM2 or another process manager to restart the service
            if pm2 show product-service > /dev/null; then
              echo "Application is running. Restarting..."
              pm2 restart product-service
            else
              echo "Application is not running. Starting..."
              pm2 start yarn --name product-service -- start
